<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>PlayerRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INITIALIZE VALUES
grav = 0.4;
hsp = 0;
vsp = 0;
moveSpeed = 4;
jumpSpeed = 6;
move = 0;
xPos = x;
yPos = y;
facing = 0;
jumping = false;
grounded = true;
ladder = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVEMENT

//Get Player Input 

keyLeft = -keyboard_check_direct(ord("A"));
keyRight = keyboard_check_direct(ord("D"));
keyJump = keyboard_check_direct(vk_space);
keyUp = keyboard_check_direct(ord("W"));
keyDown = keyboard_check_direct(ord("S"));


//React to inputs 

move = keyLeft + keyRight;
hsp = move * moveSpeed;
if(vsp &lt; 10)
{
    vsp +=grav;
}
if(place_meeting(x,y+1,par_wall))
{
    vsp += keyJump * -jumpSpeed;
    
}
//Horizontal Collision
if(place_meeting(x+hsp,y, par_wall))
{
    while(!place_meeting(x+sign(hsp),y,par_wall))
    {
        x+= sign(hsp);
    }
   hsp = 0;
    
}
if(place_meeting(x,y +vsp, par_wall))
{
    while(!place_meeting(x,y+sign(vsp),par_wall))
    {
        y+= sign(vsp);
    }
   vsp = 0;
    
}
//CLIMBING

if(keyUp || keyDown)
{
    if(place_meeting(x,y,par_ladder))
    {
        ladder = true;
    }
}
if(ladder)
{
    vsp = 0;
    if(keyUp){ vsp-=4;}
    if(keyDown){ vsp+=4;}
    if(!place_meeting(x,y,par_ladder)){ ladder = false;}
    if(keyJump){ ladder = false;}
}
x +=hsp;
y +=vsp;





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SPRITE
if(facing == 0 &amp;&amp; move == -1)
{
    image_xscale = image_xscale*-1; 
    facing = 1;
}
else if(facing == 1 &amp;&amp; move == 1)
{
    image_xscale = image_xscale*-1;
    facing =0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
