<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_walk_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Values
grav = 0.4;
horizontalVelocity = 0;
vsp = 0;
accelerationInterval = 5; //TODO Implement based on time
runningAccelerationFactor = 0.1;
runningDecelerationFactor = 0.2;
maxRunningSpeed = 6;
walkingSpeed = 2;
crawlSpeed = 2;
jumpSpeed = 6;
horizontalInputDirection = 0;
xPos = x;
yPos = y;
facing = 0; //0 = right, 1 = left
jumping = false;
grounded = true;
ladder = false;
crawling = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVEMENT

//Get Player Input 

keyLeft = -keyboard_check_direct(ord("A"));
keyRight = keyboard_check_direct(ord("D"));
keyJump = keyboard_check_direct(vk_space);
keyUp = keyboard_check_direct(ord("W"));
keyDown = keyboard_check_direct(ord("S"));


/*
 * React to inputs 
 */
 
 move = keyLeft + keyRight;
 
 //Horizontal Movement 
 // Set running direction
horizontalInputDirection = keyLeft + keyRight;
//Change horizontal velocity
// If the player is below walking speed
if(abs(horizontalVelocity) &lt; walkingSpeed) {
    // Accelerate instantly to walking speed in either direction or instantly stop.
    horizontalVelocity = horizontalInputDirection * walkingSpeed;
}
// Otherwise, if the player is at or above walking speed
else{
    // If horizontal input and horizontal velocity have the same direction
    if((horizontalVelocity &lt; 0) == (horizontalInputDirection &lt; 0) &amp;&amp; horizontalInputDirection != 0) {
        // Accelerate up to max speed
        if(abs(horizontalVelocity) &lt; maxRunningSpeed) {
            horizontalVelocity += horizontalInputDirection * runningAccelerationFactor;
        }
        if(abs(horizontalVelocity) &gt; maxRunningSpeed) {
            horizontalVelocity = horizontalInputDirection * maxRunningSpeed;
        }
    } else {
        // Otherwise, decelerate
        if(horizontalVelocity &gt; 0) {
            horizontalVelocity -= runningDecelerationFactor;
        }
        else if(horizontalVelocity &lt; 0) {
            horizontalVelocity += runningDecelerationFactor;
        }
    }
}
 if(vsp &lt; 10){ vsp +=grav;}
 
 if(place_meeting(x,y+1,par_wall))
 {
    vsp = keyJump * -jumpSpeed;
 }
 //Horizontal Collision
 
 if(place_meeting(x+horizontalVelocity, y, par_wall))
 {
    while(!place_meeting(x+sign(horizontalVelocity),y,par_wall))
    {
        x+=sign(horizontalVelocity);
    }
    horizontalVelocity = 0;
 }
 x+=horizontalVelocity;
 
 //Vertical Collision
 
  if(place_meeting(x, y+vsp, par_wall))
 {
    while(!place_meeting(x,y + sign(vsp),par_wall))
    {
        y+=sign(vsp);
    }
    vsp = 0;
 }
 y+=vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Sprite


// For flipping the sprite when you input direction from whe
if(facing == 0 &amp;&amp; horizontalInputDirection == -1) {
    image_xscale = image_xscale*-1;
    facing = 1;
} else if(facing == 1 &amp;&amp; horizontalInputDirection == 1) {
    image_xscale = image_xscale*-1;
    facing = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="82">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
